------------------- Fluency: Paired t-test and Cohen's D-----------------

# 0) Install & load packages
pkgs <- c("dplyr", "tidyr")
invisible(lapply(pkgs, function(p) {
  if (!require(p, character.only = TRUE)) {
    install.packages(p, dependencies = TRUE)
    library(p, character.only = TRUE)
  }
}))

# 1) Loop over traits
trait_results <- lapply(sort(unique(data$trait)), function(tr) {
  d <- filter(data, trait == tr)
  
  # Prepare paired data
  paired <- d %>%
    group_by(participant_ID, fluent) %>%
    summarise(mean_val = mean(value, na.rm = TRUE), .groups = "drop") %>%
    pivot_wider(names_from = fluent, values_from = mean_val) %>%
    filter(!is.na(F) & !is.na(D))
  
  # Paired t-test
  t_test <- t.test(paired$D, paired$F, paired = TRUE)
  p_ttest <- t_test$p.value
  
  # Cohen's d for paired data
  diffs <- paired$D - paired$F
  cohen_d <- if (length(diffs) > 1) mean(diffs) / sd(diffs) else NA_real_
  
  # Return results
  data.frame(
    trait           = tr,
    F_mean          = round(mean(paired$F, na.rm = TRUE), 3),
    D_mean          = round(mean(paired$D, na.rm = TRUE), 3),
    diff_D_minus_F  = round(mean(diffs, na.rm = TRUE), 3),
    ttest_p         = round(p_ttest, 3),
    cohens_d        = round(cohen_d, 3),
    stringsAsFactors = FALSE
  )
})

# 2) Combine and view
trait_summary <- do.call(rbind, trait_results)
print(trait_summary)







#----------Extra
#-------------------------------------- Cohe's D ---------------------------------------------------------

library(dplyr)
library(tidyr)

# Compute per-participant mean rating by trait and fluency
paired <- data %>%
  group_by(participant_ID, trait, fluent) %>%
  summarise(mean_val = mean(value, na.rm=TRUE), .groups="drop") %>%
  pivot_wider(names_from = fluent, values_from = mean_val) %>%
  filter(!is.na(F) & !is.na(D))  # keep only those with both F and D

# Compute Cohen's d per trait
cohen_d_trait <- paired %>%
  group_by(trait) %>%
  summarise(
    m_diff  = mean(D - F),
    sd_diff = sd(D - F),
    cohen_d = m_diff / sd_diff
  )

print(cohen_d_trait)




#------------------Anova for each trait-------------------

# Example for the 'articulate' trait
m_art <- afex::aov_ez("participant_ID", "value", data %>% filter(trait=="articulate"), within="fluent")
afex::nice(m_art)



